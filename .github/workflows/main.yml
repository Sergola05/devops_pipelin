name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run tests (stub)
        run: echo "Tests passed!"

      - name: Add label test-passed
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Run antivirus scan (stub)
        run: echo "Antivirus scan passed!"

      - name: Run linter check (stub)
        run: echo "Lint check passed!"

      - name: Add label sec-passed
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed

  update_version:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v3

      - name: Determine new version
        id: version
        run: |
          # Пример: установить новую версию вручную
          echo "new_version=0.1.0" >> $GITHUB_OUTPUT
          echo "type_update=minor" >> $GITHUB_OUTPUT

      - name: Update version file and push
        run: |
          echo "${{ steps.version.outputs.new_version }}" > version
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version
          git commit -m "[${{ steps.version.outputs.new_version }}] - [old_version] ${{ steps.version.outputs.type_update }} up"
          git push https://${{ secrets.PAT_TOKEN }}@github.com/Sergola05/devops_pipelin.git HEAD:master

      - name: Add version label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ steps.version.outputs.new_version }}

  changelog:
    runs-on: ubuntu-latest
    needs: update_version
    steps:
      - uses: actions/checkout@v3

      - name: Update changelog
        run: |
          echo "Version ${{ needs.update_version.steps.version.outputs.new_version }} - merged branch ${{ github.head_ref }}" | cat - changelog.md > temp && mv temp changelog.md
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add changelog.md
          git commit -m "Update changelog for version ${{ needs.update_version.steps.version.outputs.new_version }}"
          git push https://${{ secrets.PAT_TOKEN }}@github.com/Sergola05/devops_pipelin.git HEAD:master

      - name: Add changelog label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: changelog

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: changelog.md

  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
      - uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: serjo221221
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION=$(cat version)
          docker build -t serjo221221/devops_project:v$VERSION .
          docker push serjo221221/devops_project:v$VERSION

      - name: Update DockerHub description (stub)
        run: echo "Updating DockerHub description and README..."

      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: dockerhub

  telegram_notify:
    runs-on: ubuntu-latest
    needs: dockerhub_publish
    steps:
      - uses: actions/checkout@v3

      - name: Download changelog artifact
        uses: actions/download-artifact@v2
        with:
          name: changelog
          path: ./changelog

      - name: Send Telegram notification
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage -d chat_id=${{ secrets.CHAT_ID }} -d text="New version deployed. See changelog attached."
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument -F chat_id=${{ secrets.CHAT_ID }} -F document=@./changelog/changelog.md

  deploy_prod:
    runs-on: ubuntu-latest
    needs: telegram_notify
    steps:
      - name: Deploy to PROD (stub)
        run: echo "Deploying new Docker image from DockerHub..."

      - name: Add PROD label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: PROD

  create_release:
    runs-on: ubuntu-latest
    needs: deploy_prod
    steps:
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.update_version.steps.version.outputs.new_version }}
          name: Release v${{ needs.update_version.steps.version.outputs.new_version }}
          body: "Release description for version ${{ needs.update_version.steps.version.outputs.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

