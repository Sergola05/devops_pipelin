name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run tests (stub)
        run: echo "Tests passed!"

      - name: Add label test-passed
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Antivirus scan (stub)
        run: echo "Antivirus scan passed!"

      - name: Linter check (stub)
        run: echo "Lint passed!"

      - name: Add label sec-passed
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed

  update_version:
    runs-on: ubuntu-latest
    needs: security
    outputs:
      new_version: ${{ steps.ver.outputs.new_version }}
      type_update: ${{ steps.ver.outputs.type_update }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine new version
        id: ver
        run: |
          old_version=$(cat version || echo "0.0.0")
          branch="${GITHUB_HEAD_REF:-$(git rev-parse --abbrev-ref HEAD)}"
          IFS='.' read -r major minor patch <<< "$old_version"
          if [[ "$branch" == feature* ]]; then
            minor=$((minor + 1))
            patch=0
            type="minor"
          elif [[ "$branch" == hotfix* ]]; then
            patch=$((patch + 1))
            type="patch"
          else
            type="patch"
            patch=$((patch + 1))
          fi
          new_version="$major.$minor.$patch"
          echo "$new_version" > version
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "type_update=$type" >> $GITHUB_OUTPUT

      - name: Commit version update
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version
          git commit -m "Version update: ${{ steps.ver.outputs.new_version }} (${{ steps.ver.outputs.type_update }})"
          git fetch origin
          git rebase




