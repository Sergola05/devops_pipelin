name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize]

env:
  IMAGE_NAME: serjo221221/myproject
  VERSION_FILE: version

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: echo "üß™ Unit tests passed (stub)"
      - name: Add label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: test-passed
          github_token: ${{ secrets.PAT_TOKEN }}

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: ClamAV Scan
        uses: djdefi/clamav-scan-action@v1.1.0
      - name: Linter
        run: echo "Lint check passed (stub)"
      - name: Add label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: sec-passed
          github_token: ${{ secrets.PAT_TOKEN }}

  versioning:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v3
      - name: Read version
        id: version
        run: |
          version=$(cat version)
          IFS='.' read -r major minor patch <<< "$version"

          type="patch"
          if [[ "${{ github.head_ref }}" == feature* ]]; then
            minor=$((minor + 1))
            patch=0
            type="minor"
          elif [[ "${{ github.head_ref }}" == hotfix* ]]; then
            patch=$((patch + 1))
            type="patch"
          fi

          new_version="${major}.${minor}.${patch}"
          echo "$new_version" > version
          echo "new=$new_version" >> $GITHUB_OUTPUT
          echo "type=$type" >> $GITHUB_OUTPUT

      - name: Commit new version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add version
          git commit -m "[${{ steps.version.outputs.new }}] - [${{ github.event.pull_request.head.ref }}] ${{ steps.version.outputs.type }} up"
          git push

      - name: Add label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: ${{ steps.version.outputs.new }}
          github_token: ${{ secrets.PAT_TOKEN }}

  changelog:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - uses: actions/checkout@v3
      - name: Update changelog
        run: |
          echo -e "## Version ${{ needs.versioning.outputs.new }} (from branch: ${{ github.head_ref }})\n" | cat - changelog.md > temp && mv temp changelog.md
      - name: Commit changelog
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add changelog.md
          git commit -m "Update changelog"
          git push
      - name: Add changelog label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: changelog
          github_token: ${{ secrets.PAT_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
      - uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        run: |
          VERSION=$(cat version)
          docker build -t $IMAGE_NAME:v$VERSION .
          docker push $IMAGE_NAME:v$VERSION

      - name: Add dockerhub label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: dockerhub
          github_token: ${{ secrets.PAT_TOKEN }}

  telegram:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3
      - name: Send message
        run: |
          curl -F document=@changelog.md \
            -F caption="‚úÖ CI/CD Pipeline completed for PR [${{ github.event.pull_request.number }}](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }})" \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}"

  prod:
    runs-on: ubuntu-latest
    needs: telegram
    steps:
      - name: Deploy
        run: |
          echo "üöÄ Pull and run docker-compose with updated image (–∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞ –ª–æ–∫–∞–ª–∫–µ)"
      - name: Add PROD label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: PROD
          github_token: ${{ secrets.PAT_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: prod
    steps:
      - uses: actions/checkout@v3
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.versioning.outputs.new }}
          name: Release ${{ needs.versioning.outputs.new }}
          body: |
            Release for branch: ${{ github.head_ref }}
            Version: ${{ needs.versioning.outputs.new }}



