name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run tests (stub)
        run: echo "Tests passed!"

      - name: Add label test-passed
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Antivirus scan (stub)
        run: echo "Antivirus scan passed!"

      - name: Linter check (stub)
        run: echo "Lint passed!"

      - name: Add label sec-passed
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed

  update_version:
    runs-on: ubuntu-latest
    needs: security
    outputs:
      new_version: ${{ steps.ver.outputs.new_version }}
      type_update: ${{ steps.ver.outputs.type_update }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine new version
        id: ver
        run: |
          old_version=$(cat version || echo "0.0.0")
          branch="${GITHUB_HEAD_REF:-$(git rev-parse --abbrev-ref HEAD)}"
          IFS='.' read -r major minor patch <<< "$old_version"
          if [[ "$branch" == feature* ]]; then
            minor=$((minor + 1))
            patch=0
            type="minor"
          elif [[ "$branch" == hotfix* ]]; then
            patch=$((patch + 1))
            type="patch"
          else
            type="patch"
            patch=$((patch + 1))
          fi
          new_version="$major.$minor.$patch"
          echo "$new_version" > version
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "type_update=$type" >> $GITHUB_OUTPUT

      - name: Commit version update
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull --rebase origin master
          git add version
          git commit -m "[${{ steps.ver.outputs.new_version }}] - [old_version] ${{ steps.ver.outputs.type_update }} up" || echo "Nothing to commit"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:master

      - name: Add version label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ steps.ver.outputs.new_version }}

  changelog:
    runs-on: ubuntu-latest
    needs: update_version
    steps:
      - uses: actions/checkout@v4

      - name: Update changelog
        run: |
          echo "Version ${{ needs.update_version.outputs.new_version }} ‚Äî merged branch: ${{ github.head_ref || github.ref_name }}" | cat - changelog.md > temp && mv temp changelog.md
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull --rebase origin master
          git add changelog.md
          git commit -m "Update changelog for version ${{ needs.update_version.outputs.new_version }}" || echo "No changes"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git HEAD:master

      - name: Add changelog label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: changelog

      - name: Upload changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md

  dockerhub_publish:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
      - uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: serjo221221
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION=$(cat version)
          docker build -t serjo221221/devops_project:v$VERSION .
          docker push serjo221221/devops_project:v$VERSION

      - name: Add dockerhub label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: dockerhub

  telegram_notify:
    runs-on: ubuntu-latest
    needs: dockerhub_publish
    steps:
      - uses: actions/checkout@v4

      - name: Download changelog artifact
        uses: actions/download-artifact@v4
        with:
          name: changelog
          path: ./changelog

      - name: Send Telegram notification
        run: |
          TEXT="‚úÖ *–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞*\n\nüì¶ –í–µ—Ä—Å–∏—è: \`${{ needs.update_version.outputs.new_version }}\`\nüîó [–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π](${{ github.server_url }}/${{ github.repository }})"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$TEXT"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument \
            -F chat_id=${{ secrets.CHAT_ID }} \
            -F document=@./changelog/changelog.md

  deploy_prod:
    runs-on: ubuntu-latest
    needs: telegram_notify
    steps:
      - name: Deploy to PROD (stub)
        run: echo "Deploying from DockerHub..."

      - name: Add PROD label
        if: github.event.pull_request != null
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: PROD

  create_release:
    runs-on: ubuntu-latest
    needs: deploy_prod
    steps:
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.update_version.outputs.new_version }}
          name: Release v${{ needs.update_version.outputs.new_version }}
          body: "Auto-release of version ${{ needs.update_version.outputs.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



